---
- name: Ensure required tools are installed.
  ansible.builtin.apt:
    cache_valid_time: 86400  # 24 hours
    name: [unzip, zsh]
    state: present
    update_cache: true
  when: ansible_os_family == 'Debian'

- name: Testing 'avinode.devenv.install_terraform_versions'
  block:
    # -------------------------------------------------------------------------
    # Arrange
    # -------------------------------------------------------------------------
    - name: Create temporary test directory
      ansible.builtin.tempfile:
        state: directory
        suffix: .install-terraform-integration-tests
      register: _tmp_test_dir
    - ansible.builtin.set_fact:
        avinode_devenv_prefix: '{{ _tmp_test_dir.path }}'
    - ansible.builtin.include_role:
        name: avinode.devenv.baseline

    # -------------------------------------------------------------------------
    # Test install
    # -------------------------------------------------------------------------
    - name: Executing `install_terraform_versions` to test installs
      ansible.builtin.import_role:
        name: avinode.devenv.install_terraform_versions
      vars:
        install_terraform_versions:
          absent: []
          absent_symlinks: []
          installed:
            - '0.12.28'
            - '0.14.7'
            - '1.0.1'
            - '1.2.6'
            - '1.5.7'
          symlinks:
            terraform0.14: '0.14.7'
            terraform1.2: '1.2.6'
            terraform1.5: '1.5.7'
            terraform1: '1.5.7'
            terraform: '1.5.7'

    - name: Test installed terraform executables.
      ansible.builtin.command:
        cmd: '{{ _tmp_test_dir.path }}/bin/{{ item.key }} version'
      register: _ver_check
      failed_when: item.value not in _ver_check.stdout
      loop: '{{ _cmd_versions | dict2items }}'
      vars:
        _cmd_versions:
          terraform: '1.5.7'
          terraform0.12.28: '0.12.28'
          terraform0.14: '0.14.7'
          terraform0.14.7: '0.14.7'
          terraform1: '1.5.7'
          terraform1.5: '1.5.7'
          terraform1.2: '1.2.6'
          terraform1.0.1: '1.0.1'
          terraform1.5.7: '1.5.7'
          terraform1.2.6: '1.2.6'

    - name: Test that Bash completions can be sourced.
      ansible.builtin.shell:
        cmd: '/bin/bash -c "source {{ _tmp_test_dir.path }}/etc/bash_completion.d/{{ item }}.sh"'
      loop:
        - terraform
        - terraform0.12.28
        - terraform0.14
        - terraform0.14.7
        - terraform1
        - terraform1.0.1
        - terraform1.2.6
        - terraform1.5.7

    - name: Test that Zsh completions can be sourced.
      ansible.builtin.shell:
        cmd: '/bin/zsh -c "source {{ _tmp_test_dir.path }}/share/zsh/site-functions/_{{ item }}"'
      loop:
        - terraform
        - terraform0.12.28
        - terraform0.14
        - terraform0.14.7
        - terraform1
        - terraform1.0.1
        - terraform1.2.6
        - terraform1.5.7

    # -------------------------------------------------------------------------
    # Test uninstall
    # -------------------------------------------------------------------------
    - name: Executing `install_terraform_versions` to test uninstalls
      ansible.builtin.include_role:
        name: avinode.devenv.install_terraform_versions
      vars:
        install_terraform_versions:
          absent:
            - '0.12.28'
            - '0.14.7'
            - '1.0.1'
          absent_symlinks:
            - terraform0.14
          installed:
            - '1.2.6'
            - '1.5.7'
          symlinks:
            terraform: '1.5.7'
            terraform1: '1.5.7'
            terraform1.5: '1.5.7'
            terraform1.2: '1.2.6'

    # Check that files have been removed.
    - name: Test that the bin files for uninstalled versions have been deleted.
      ansible.builtin.stat:
        path: '{{ _tmp_test_dir.path }}/bin/{{ item }}'
      register: _test_file_stats
      failed_when: _test_file_stats.stat.exists
      loop:
        - terraform0.12.28
        - terraform0.14
        - terraform0.14.7
        - terraform1.0.1

    # Check that originals are still in place.
    - name: Test that the bin files for the other versions still exist.
      ansible.builtin.stat:
        path: '{{ _tmp_test_dir.path }}/bin/{{ item }}'
      register: _test_file_stats
      failed_when: |
        not (_test_file_stats.stat.exists and _test_file_stats.stat.executable)
      loop:
        - terraform
        - terraform1
        - terraform1.5
        - terraform1.2
        - terraform1.5.7
        - terraform1.2.6

    # ---- bash ----
    - name: Test that Bash completion files have been removed
      ansible.builtin.stat:
        path: '{{ _tmp_test_dir.path }}/etc/bash_completion.d/{{ item }}.sh'
      register: _test_file_stats
      failed_when: _test_file_stats.stat.exists
      loop:
        - terraform0.12.28
        - terraform0.14
        - terraform0.14.7
        - terraform1.0.1

    - name: Test that older Bash completion files still exist
      ansible.builtin.stat:
        path: '{{ _tmp_test_dir.path }}/etc/bash_completion.d/{{ item }}.sh'
      register: _test_file_stats
      failed_when: not _test_file_stats.stat.exists
      loop:
        - terraform
        - terraform1
        - terraform1.2
        - terraform1.2.6
        - terraform1.5
        - terraform1.5.7

    # ---- Zsh ----
    - name: Test that Zsh completion files have been removed
      ansible.builtin.stat:
        path: '{{ _tmp_test_dir.path }}/share/zsh/site-functions/_{{ item }}'
      register: _test_file_stats
      failed_when: _test_file_stats.stat.exists
      loop:
        - terraform0.12.28
        - terraform0.14
        - terraform0.14.7
        - terraform1.0.1

    - name: Test that older Zsh completion files still exist
      ansible.builtin.stat:
        path: '{{ _tmp_test_dir.path }}/share/zsh/site-functions/_{{ item }}'
      register: _test_file_stats
      failed_when: not _test_file_stats.stat.exists
      loop:
        - terraform
        - terraform1
        - terraform1.2
        - terraform1.2.6
        - terraform1.5
        - terraform1.5.7

  always:
    - name: Delete temporary test directory
      ansible.builtin.file:
        path: '{{ _tmp_test_dir.path }}'
        state: absent
  vars:
    avinode_devenv_become_for_all: false
    avinode_devenv_default_group: '{{ ansible_user_gid }}'
    avinode_devenv_default_owner: '{{ ansible_user_id }}'
...
